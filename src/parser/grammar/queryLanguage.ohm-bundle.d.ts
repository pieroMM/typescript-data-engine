// AUTOGENERATED FILE
// This file was generated from queryLanguage.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface QueryActionDict<T> extends BaseActionDict<T> {
  Query_complete?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Query_projectOnly?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Query_filterOnly?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Query?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  Number_whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  Number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  String?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  columnName?: (this: NonterminalNode, arg0: IterationNode) => T;
  Columns?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Project?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Filter?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  FilterPredicate_ltString?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FilterPredicate_gtString?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FilterPredicate_eqString?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FilterPredicate_ltNumber?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FilterPredicate_gtNumber?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FilterPredicate_eqNumber?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FilterPredicate?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface QuerySemantics extends Semantics {
  addOperation<T>(name: string, actionDict: QueryActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: QueryActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: QueryActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: QueryActionDict<T>): this;
}

export interface QueryGrammar extends Grammar {
  createSemantics(): QuerySemantics;
  extendSemantics(superSemantics: QuerySemantics): QuerySemantics;
}

declare const grammar: QueryGrammar;
export default grammar;

